#include <vector>
using namespace std;
class Solution {
public:
    int getrep(int a, vector<int> &dsu){
        if (dsu[a] != a) {
            dsu[a] = getrep(dsu[a], dsu);
        }
        return dsu[a];
    }

    void dunion(int a, int b, vector<int> &dsu){
        dsu[getrep(a, dsu)] = getrep(b, dsu);
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(), initial.end());
        int n = graph.size();
        vector<int> dsu(n);
        for (int i = 0; i < n; ++i) dsu[i] = i;

        for (int i = 0; i < n; ++i){
            for (int j = i + 1; j < n; ++j){
                if (graph[i][j]) dunion(i, j, dsu);
            }
        }

        vector<int> usize(n, 0), infected(n, 0);
        for (int i = 0; i < n; ++i) usize[getrep(i, dsu)]++;
        for (auto i : initial) {
            infected[getrep(i, dsu)]++;
        }

        int maxsize = 0, ans;
        for (auto i : initial){
            int ii = getrep(i, dsu);
            if (infected[ii] == 1 && usize[ii] > maxsize) {
                ans = i;
                maxsize = usize[ii];
            }
        }
        if (maxsize) return ans;
        return initial[0];

    }
};
